/// from '\GameData\Gameplay\Constantes\Enumerations\IADifficulty.ndf' import IADifficulty
/// from '\CommonData\Gameplay\Constantes\Enumerations\CollisionPlane.ndf' import ECollisionPlane

// 崩溃: CommonData\Scenery\LevelDesignSet\TemplateSceneryDescriptorTag.ndf
// 128: 类型错误 CommonData\UserInterface\Use\Common\Templates\BUCKEditableTextDescriptorTemplate.ndf
// 68: MAP语义高亮错误 CommonData\UserInterface\Use\Common\Templates\BUCKGridDescriptorTemplate.ndf
// 185: 类型错误 CommonData\UserInterface\Use\Common\Templates\BUCKMultiListDescriptorTemplate.ndf
// TODO: 内置类型float2支持
// 110: 类型错误 CommonData\UserInterface\Use\Common\Templates\BUCKScrollingContainerDescriptorTemplate.ndf
// 224: ObjectCall蓝图尾随注释错误 CommonData\UserInterface\Use\Common\Templates\BUCKWithTabsDescriptorTemplate.ndf
// 55: 类型错误 CommonData\UserInterface\Use\BUCKAura.ndf
// 崩溃: GameData\Gameplay\Constantes\Strategic\AutoresolveConstantes.ndf
// 崩溃: GameData\Gameplay\Constantes\Strategic\GDConstantes.ndf
// 崩溃: GameData\Gameplay\Constantes\GDConstantes.ndf
// 崩溃: GameData\Gameplay\Constantes\IAStratConstantes.ndf
// 崩溃: GameData\Gameplay\Constantes\Ravitaillement.ndf
// 18: 类型错误 GameData\Gameplay\Gfx\DepictionResources\Vehicule\A222_Bereg_SOV.ndf
// 崩溃: GameData\Gameplay\Gfx\Templates\StrategicPawnDepictionTemplate.ndf

// 命名内置值
/* 可以使用关键字is为内置类型的值命名，类似于在编程语言中创建变量。 */
Gravity is 9.81

/// import a, b, c
/// from '/path/to/file.ndf' import d

/**
 * 文档注释
 */

Currencies is MAP[
    (
    'EUR',
    '€'
    ),
    ('USD', '$'),
    ('GBP', '£'),
]

Places is [
    'Antarctica',
    'Everest',
    'Mars',
    ]

// 算术操作
/* 常用的数字运算有：加、减、乘、除、模。 */
Pi is 3 + 0.1415954

PiCube is Pi * Pi * Pi

X is 35 div 8 // 除法是通过关键字“div”使用的

Y is 35 % 8

// 您还可以使用+运算符连接字符串、向量和表。
A is [1, 2,] + [3, 4]

B is MAP[ (1, 'one')] + MAP[ (2, 'two')]

C is "Hello" + " World!"


// 对象定义
/*
 * 除了内置值外，NDF还允许创建和使用复杂的对象。
 * 对象由其名称和类型定义，可以包含成员值。类型（几乎？）总是以大写字母“T”开头。它们代表游戏的内部数据结构，其定义不可用。
 * 加载数据时，游戏将创建所需类型的对象，并用NDF描述中填写的成员值填充其字段。
 */
// 这将创建一个包含两个成员的TExampleType实例
ExampleObject1 is TExampleType (
    MemberInteger = 12
    MemberString = "something"
    )

/*
 * 如果类型定义包含未在对象的NDF定义中填充的成员值，则默认为基值。对于数字来说，这通常是0，对于布尔值来说是false，对于容器（字符串、向量、映射）来说是空的。
 * 类型可以有其他类型作为成员，从而产生“嵌套对象”。
 */
ExampleObject2 is TExampleType (
    innerObject = TOtherType (
        ValueString = "I am a member of TExampleType"
        )
    )

/*
 * 对象可以在没有名称的情况下使用关键字unnamed定义，它们被称为未命名对象。未命名的对象只能定义为“顶级对象”，这意味着它们不是另一个对象的成员。
 */
unnamed TExampleType (
    ValueString = "I am an unnamed object"
    )


// 引用对象
/*
 * 引用是与对象名称相对应的标签。引用可以为null，在这种情况下等于nil。
 * 某些类型将引用作为成员，因为它们需要能够访问其他对象才能工作。
 */
DataHolder is TDataHolder (
    SomeInt = 456
    SomeString = "A string"
    SomeMap = MAP[
    ]
    )

DataUser is TDataUser (
    Condition = false
    DataHolderReference = DataHolder // 这里我们引用DataHolder对象
    )

/*
 * 在上述情况下，找到的第一个名为DataHolder的对象将被视为引用。根据对象的范围，还有其他引用对象的方法。
 * 在不深入细节的情况下，在启动过程中加载了许多其他对modder不可见的NDF文件，可修改的文件可能需要引用它们。
 * 这就是其他类型的参考发挥作用的地方：
 */
// $/Path/To/OtherObject // 绝对引用
// ~/Path/To/OtherObject // 来自加载命名空间的引用（modder无法知道）
// ./Path/To/OtherObject // 来自当前命名空间的引用


// 原型
/*
 * 原型是一个常规对象，将用于从中创建另一个对象。任何命名的对象都可以作为原型。
 * 从原型创建对象将把原型的副本复制到新对象中，并允许随意覆盖某些成员。
 */
Prototype is TThing (
    ValueString = 'I am a prototype object'
    ValueInt = 666
    )

ObjectFromPrototype is Prototype (
    ValueString = 'I am just me'
    )


// 模板
/*
 * 模板允许以通用方式从参数列表生成对象。它们与C家族语言中的宏非常接近。
 * 它们由关键字template、名称、[ ]块中包含的参数列表以及模板正文定义。
 */
// 什么都不做的基本模板
template MyTemplate // 模板名称
[]  // 模板参数
is TType   // 模板创建的对象的最终类型
()
// 类型成员
/*
 * 参数块定义了一个参数列表，用,(逗号)分隔。
 * 参数的语法为 %name% [: %type%] [= %default%]. 该名称为必填项，然而：
 * 可以指定可选类型，否则将从上下文中推断出来
 * 可以指定可选的默认值，否则在使用模板时必须提供该值
 * 在模板体中，模板参数由其名称括在< >中使用。
 */
// 更详细的示例
// 假设存在TWeapon和TCharacter类型。
Axe is TWeapon (
    // 下面是成员们对这种武器的描述
)

Knife is TWeapon ()  // <-- Warnning

template Character1 [
    Name : string,

    Level : int = 1,
    Weapon : TWeapon = TWeapon()  // <-- Error
]
is TCharacter (
    Name = <Name>
    Level = <Level>
    HP = <Level> * 100
    Weapon = <Weapon>
    Damages = <Weapon>/Damages * (1 + Level div 10)
)

Hero is Character1 (
    Name = "Hero"
    Level = 12
    Weapon = Axe
)

Creep is Character1 (
    Name = "Creep"
    Weapon = Knife
    // 未指定Level，使用默认值
    )


// 高级模板
/*
 * 范围对象
 * 对象可以在模板体内部声明。
 */
template Character2 [
    Name : string,
    Level : int = 1,
    Weapon : TWeapon = TWeapon()
]
is TCharacter (
    Bag is TInventory (
        MaxItemCount = <Level> * 3
        )
    Name = <Name>
    Level = <Level>
    HP = <Level> * 100
    Weapon = <Weapon>
    Damages = <Weapon>/Damages * (1 + Level div 10)
    Inventory = Bag
)

/*
 * 模板的模板
 * 一个模板可以从另一个模板派生。
 */
template CloneHero1 [
    Name : string
]
is Character (
    Name = <Name>
    Level = 12
    Weapon = Axe
)

/*
 * 派生模板也可以覆盖作用域对象。
 */
template CloneHero2 [
    Name : string
]
is Character (
    Name = <Name>
    Level = 12
    Weapon = Axe
    Bag is TInventory (
        MaxItemCount = 0
        )
    )

// -------------------------------------------------------------------

Descriptor_Deck_Division_Integrate_mutil is TDeckDivisionDescriptor (
    test is 123
    DescriptorId = GUID:{69a17806-4fc1-45f2-b7de-af42e681a350}
    CfgName = 'US_3rd_Arm_multi'
    DivisionName = 'INTEGRATE_MUTIL'
    DivisionPowerClassification = 'DC_PWR1'
    DivisionCoalition = ECoalition/Allied
    DivisionTags = ['DEFAULT', 'US', 'Allied', 'armored', 'DC_PWR1']
    DescriptionHintTitleToken = 'INTEGRATE_MUTIL'
    PackList = MAP [
        (~/Descriptor_Deck_Pack_FOB_US, 1)
        ]
    MaxActivationPoints = 9999
    CostMatrix = MatrixCostName_Integrate_mutil
    EmblemTexture     = "Texture_Division_Emblem_Integrate_mutil"
    PortraitTexture   = "Texture_Division_Portrait_default"
    TypeTexture       = "Texture_Division_Type_armored"
    CountryId = "US"
)

export PixelConstantValuesSpecific is TBaseClass
(
    // Pixel Constant par defaut wargame
    export DefaultFactor                       is  0.55
    export DefaultScaleMax                     is  3.14
    export DefaultMinReferenceAltitude         is  18550.0

    // Pixel Constant des avions
    export AirplaneFactor                      is  0.65
    export AirplaneScaleMax                    is  3.14
    export AirplaneMinReferenceAltitude        is  18550.0

    // Pixel Constant des infanteries
    export InfantryFactor                      is  0.75
    export InfantryScaleMax                    is  3.14
    export InfantryMinReferenceAltitude        is  18550.0

    // Pixel Constant des impacts
    export ImpactFactor                        is  0.4
    export ImpactScaleMax                      is  3.14
    export ImpactMinReferenceAltitude          is  18550.0
)

private template SceneryDescriptor_ScenarioZone
[
    ColorCode                : color = RGBA[0, 0, 0, 0],

    SymbolDatabaseProxy,
    Layer                    = nil,
    RequiredTags : LIST<string> = []
]
is TSceneryDescriptorSurfaceWithBorder
(
    Components = <Hint> != nil ? [<Hint>] : []

    ObjectIns is TObject(key: type)

    Border                   = TSceneryDescriptorBezierTriangleString
    (
        Color                = <BorderColor>
        WidthInLBU           = <BorderWidthInLBU>
        BezierMaxErrorInLBU  = 2.32558139535
        MeshBucketHandler    = $/SceneryBase/SceneryMeshBucketHandler_TriangleString
    )

    LocalVariables =
            [
                private parPower            is TPinnableValue(ExpectedType = 'float' InitialValue = <Power>),
            ]

     NamedParams = MAP
            [
                ('parPower',            parPower ),  // 内部注释
            ]
)

export HelicopterWeightsManager is THelicopterWeightsManager
(
    HelicopterWeights = MAP [
        (~/Landing, ~/LandingHelicopterWeights),
    ]

    IntermediateWaypointHelicopterWeights = MAP [
        (~/Landing, ~/LandingIntermediateHelicopterWeights),
    ]

    DefaultIntermediateWaypointsHelicopterWeights = ~/DefaultIntermediateHelicopterWeights

    WaypointScoreThresholds = MAP [
        (~/Landing, (1.5, 3.0)),
    ]

    DefaultIntermediateWayPointScoreTolerance = 10.0
)

template EAllianceStyleCommon
[
]
is TBaseClass
(
    Neutral         is 0
    AlliedWithAll   is 1
    EnemyWithAll    is 2
    StartSpecificValue is 3
)

template EAllianceStyleModernWarfare [] is EAllianceStyleCommon
(
    BLUFOR    is StartSpecificValue
    REDFOR    is StartSpecificValue + 1
)

export CommonVehicleScaler is TCameraScaler
(
    ScaleFactor = PixelConstantValuesSpecific/DefaultFactor
    ScaleMax = PixelConstantValuesSpecific/DefaultScaleMax
    ScaleMinReferenceAltitude = PixelConstantValuesSpecific/DefaultMinReferenceAltitude
    Camera = $/M3D/Misc/CameraPrincipale
    ScaleOption = $/GUIOption/UnitScalingEnabled
)

Tactic_Descriptor_Unit_FakeTarget is TEntityDescriptor (
    ModulesDescriptors =
    [
        TTagsModuleDescriptor (
            TagSet = [
                "AllUnits",
            ]
        )
    ]
)

WorldControllerAccess_InOutWorld    is WorldControllerAccess_InWorld | WorldControllerAccess_OutWorld


template BUCKAnimatedContainerDescriptor
[
    PointerEventsToAllow : int = ~/EAllowablePointerEventType/None,

    UseRewind : bool = true, // Si true, lorsque l'animation est redeclenchée apres avoir jouée, elle va rejouer à l'envers

    ParametersByTrigger : MAP<int, TUIAnimationParametersDescriptor>, // Les paramètre des l'animation rangé par déclencheur (mettre des valeurs négatives pour les déclencheurs customs)
]
is TBUCKAnimatedContainerDescriptor (
    FocusMapping = <FocusMapping>
    // -- BUCKButtonDescriptor
)

private EditorActionButtonContainer is BUCKContainerDescriptor
(
    BorderLineColorToken = "Editor/Container/Border"

    Components = [
        // TOO : Ajouter les composants ici
    ]
)

// I:\SteamLibrary\steamapps\common\WARNO\Mods\WarnoMod\CommonData\UserInterface\Use\BUCKAura.ndf 其list中的模板参数悬停错误

EditableTextFlag is TBaseClass
(
    HIDE_CHARACTERS is 0x0800
    COPY_DISABLED is 0x1000
    PASTE_DISABLED is 0x2000
    INPUT_DISABLED is 0x4000

    PASSWORD is HIDE_CHARACTERS | COPY_DISABLED
    READ_ONLY is PASTE_DISABLED | INPUT_DISABLED
)

// 由于大小写不敏感导致,Bool,Float成为关键字
MultiListSorting is TBaseClass
(
    None                        is 0
    Bool                        is 1
    Integer                     is 2
    Float                       is 3
    String                      is 4
    StringStartingWithNumber    is 5
)

export Main is TClusterNdfTransactions
(
    VictoryTypeByBalanceOfPowerByTerrainType = MAP
    [
        (
            ~/ETerrainType/Default,
            [
                ( -1.5,     EVictoryType/TotalDefeat),  // 这里的-1.5导致问题
            ]
        ),
    ]
    Transactions =
    [
        TNDFTransaction
        (
            FillResourceList = true

            Files =
            [
                'CommonData:System/Globals.ndf',
                'GameData:/Gameplay/Gfx/DepictionResources/DepictionTurrets.ndf',
            ]
            +
            GeneratedDepictionNdfFiles
        )
    ]
)

export ActionPointConsumptionGridConstants is TActionPointConsumptionGridConstantsDescriptor
(
    //---------------------------------------------------------------------------------------//
    //--------------------------------- REGLAGES GAMEPLAY -----------------------------------//
    //---------------------------------------------------------------------------------------//
    TerrainsBloquants = [
    ]

    TerrainsRalentisseurs = [
        ~/ETerrainType/StrategicForest,
    ]

    // Precision de la grille : Attention à l'impact sur les perfs
    TailleDeCaseApproximativeGRU = ~/ActionPointConsumptionRefs/CaseSizeGRU // ATTENTION : modifier cette valeur dans GameData:/Gameplay/Constantes/ActionPointConsumptionGridRefs.ndf

    //---------------------------------------------------------------------------------------//
    //--------------------------------- REGLAGES FEEDBACK -----------------------------------//
    //---------------------------------------------------------------------------------------//
    CouleurDeLaCourbe = RGBA [19,85,106,0]  //[96,57,19,255]
    EpaisseurDeLaCourbe = 1200
)
